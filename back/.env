const request = require('supertest');
const express = require('express');
const mongoose = require('mongoose');
const Todo = require('../src/models/Todo');
const todoController = require('../src/controllers/todoController'); // Adjust path to your controller

// Create a test app
const app = express();
app.use(express.json());

// Set up routes
app.get('/todos', todoController.getAllTodos);
app.post('/todos', todoController.createTodo);
app.put('/todos/:id', todoController.updateTodo);
app.delete('/todos/:id', todoController.deleteTodo);

describe('Todo Controller', () => {
  beforeAll(async () => {
    // Connect to test database
    await mongoose.connect('mongodb://localhost:27017/todo-test', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
  });

  beforeEach(async () => {
    // Clear the database before each test
    await Todo.deleteMany({});
  });

  afterAll(async () => {
    // Clean up and close connection
    await Todo.deleteMany({});
    await mongoose.connection.close();
  });

  // Test 1: Get all todos
  test('GET /todos should return all todos', async () => {
    // Create test data
    await Todo.create([
      { text: 'Test todo 1', completed: false },
      { text: 'Test todo 2', completed: true }
    ]);

    const response = await request(app)
      .get('/todos')
      .expect(200);

    expect(response.body).toHaveLength(2);
    expect(response.body[0].text).toBe('Test todo 2'); // Most recent first
    expect(response.body[1].text).toBe('Test todo 1');
  });

  // Test 2: Create a new todo
  test('POST /todos should create a new todo', async () => {
    const newTodo = { text: 'New test todo' };

    const response = await request(app)
      .post('/todos')
      .send(newTodo)
      .expect(201);

    expect(response.body.text).toBe(newTodo.text);
    expect(response.body.completed).toBe(false);
    expect(response.body._id).toBeDefined();

    // Verify it was saved to database
    const savedTodo = await Todo.findById(response.body._id);
    expect(savedTodo.text).toBe(newTodo.text);
  });

  // Test 3: Update a todo
  test('PUT /todos/:id should update a todo', async () => {
    // Create a todo first
    const todo = await Todo.create({ text: 'Test todo', completed: false });

    const response = await request(app)
      .put(`/todos/${todo._id}`)
      .send({ completed: true })
      .expect(200);

    expect(response.body.completed).toBe(true);
    expect(response.body.text).toBe('Test todo');

    // Verify it was updated in database
    const updatedTodo = await Todo.findById(todo._id);
    expect(updatedTodo.completed).toBe(true);
  });

  // Test 4: Delete a todo
  test('DELETE /todos/:id should delete a todo', async () => {
    // Create a todo first
    const todo = await Todo.create({ text: 'Test todo', completed: false });

    const response = await request(app)
      .delete(`/todos/${todo._id}`)
      .expect(200);

    expect(response.body.message).toBe('Todo removed');

    // Verify it was deleted from database
    const deletedTodo = await Todo.findById(todo._id);
    expect(deletedTodo).toBeNull();
  });

  // Test 5: Handle todo not found
  test('PUT /todos/:id should return 404 when todo not found', async () => {
    const nonExistentId = new mongoose.Types.ObjectId();

    const response = await request(app)
      .put(`/todos/${nonExistentId}`)
      .send({ completed: true })
      .expect(404);

    expect(response.body.message).toBe('Todo not found');
  });
});